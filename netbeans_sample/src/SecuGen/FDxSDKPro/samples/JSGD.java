/*
 * JSGD.java
 *
 * Created on May 11, 2005, 10:51 AM
 */

package SecuGen.FDxSDKPro.samples;

import SecuGen.FDxSDKPro.jni.*;
import java.awt.*;
import java.awt.MediaTracker;
import java.awt.image.*;
import javax.swing.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.Base64;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class JSGD extends javax.swing.JFrame {

    // Private instance variables
    private long deviceName;
    private long devicePort;
    private JSGFPLib fplib = null;
    private long ret;
    private boolean bLEDOn;
    private byte[] regMin1 = new byte[400];
    private byte[] regMin2 = new byte[400];
    private byte[] vrfMin = new byte[400];
    private SGDeviceInfoParam deviceInfo = new SGDeviceInfoParam();
    private BufferedImage imgRegistration1;
    private BufferedImage imgRegistration2;
    private BufferedImage imgVerification;
    private boolean r1Captured = false;
    private boolean r2Captured = false;
    private boolean v1Captured = false;
    private static int MINIMUM_QUALITY = 60; // User defined
    private static int MINIMUM_NUM_MINUTIAE = 20; // User defined
    private static int MAXIMUM_NFIQ = 2; // User defined

    // Database connection details
    private static final String DB_URL = "jdbc:mariadb://192.168.8.7:3306/mb_recursos_humanos";
    private static final String DB_USER = "rrhh_dev";
    private static final String DB_PASSWORD = "rrhh_dev_test";
    private Connection dbConnection;

    /** Creates new form JSGD */
    public JSGD() {
        bLEDOn = false;
        initComponents();
        disableControls();
        this.jComboBoxRegisterSecurityLevel.setSelectedIndex(4);
        this.jComboBoxVerifySecurityLevel.setSelectedIndex(4);
        connectToDatabase();

        // Set default value for jComboBoxRegistro based on time
        Calendar cal = Calendar.getInstance();
        int hour = cal.get(Calendar.HOUR_OF_DAY);
        if (hour < 13) {
            jComboBoxRegistro.setSelectedItem("Entrada");
        } else {
            jComboBoxRegistro.setSelectedItem("Salida");
        }
    }

    private void connectToDatabase() {
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            dbConnection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            if (dbConnection != null) {
                jLabelStatus.setText("Conexión a la base de datos exitosa.");
            }
        } catch (ClassNotFoundException e) {
            jLabelStatus
                    .setText("Error: Driver de MariaDB no encontrado. Asegúrese de añadir el conector a su proyecto.");
        } catch (SQLException ex) {
            jLabelStatus.setText("Error al conectar a la base de datos: " + ex.getMessage());
        }
    }

    private void disconnectFromDatabase() {
        if (dbConnection != null) {
            try {
                dbConnection.close();
            } catch (SQLException ex) {
                // Ignorar errores al cerrar
            }
        }
    }

    private void disableControls() {
        this.jButtonToggleLED.setEnabled(false);
        this.jButtonCapture.setEnabled(false);
        this.jButtonCaptureR1.setEnabled(false);
        this.jButtonCaptureR2.setEnabled(false);
        this.jButtonCaptureV1.setEnabled(false);
        this.jButtonRegister.setEnabled(false);
        this.jButtonVerify.setEnabled(false);
        this.jButtonGetDeviceInfo.setEnabled(false);
        this.jButtonClose.setEnabled(false);
        this.jButtonInit.setEnabled(true);
    }

    private void enableControls() {
        this.jButtonToggleLED.setEnabled(true);
        this.jButtonCapture.setEnabled(true);
        this.jButtonCaptureR1.setEnabled(true);
        this.jButtonCaptureR2.setEnabled(true);
        this.jButtonCaptureV1.setEnabled(true);
        this.jButtonGetDeviceInfo.setEnabled(true);
        this.jButtonClose.setEnabled(true);
        this.jButtonInit.setEnabled(false);
    }

    private void enableRegisterAndVerifyControls() {
        if (r1Captured && r2Captured)
            this.jButtonRegister.setEnabled(true);
        if (r1Captured && r2Captured && v1Captured)
            this.jButtonVerify.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelStatus = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelImage = new javax.swing.JPanel();
        jButtonInit = new javax.swing.JButton();
        jLabelImage = new javax.swing.JLabel();
        jButtonToggleLED = new javax.swing.JButton();
        jButtonCapture = new javax.swing.JButton();
        jSliderQuality = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSliderSeconds = new javax.swing.JSlider();
        jButtonClose = new javax.swing.JButton();
        jLabelRegistro = new javax.swing.JLabel();
        jComboBoxRegistro = new javax.swing.JComboBox();
        jPanelRegisterVerify = new javax.swing.JPanel();
        jLabelSecurityLevel = new javax.swing.JLabel();
        jLabelRegistration = new javax.swing.JLabel();
        jLabelVerification = new javax.swing.JLabel();
        jComboBoxRegisterSecurityLevel = new javax.swing.JComboBox();
        jComboBoxVerifySecurityLevel = new javax.swing.JComboBox();
        jLabelRegistrationBox = new javax.swing.JLabel();
        jLabelRegisterImage1 = new javax.swing.JLabel();
        jLabelRegisterImage2 = new javax.swing.JLabel();
        jLabelVerificationBox = new javax.swing.JLabel();
        jLabelVerifyImage = new javax.swing.JLabel();
        jButtonCaptureR1 = new javax.swing.JButton();
        jButtonCaptureV1 = new javax.swing.JButton();
        jButtonRegister = new javax.swing.JButton();
        jButtonVerify = new javax.swing.JButton();
        jButtonCaptureR2 = new javax.swing.JButton();
        jProgressBarR1 = new javax.swing.JProgressBar();
        jProgressBarR2 = new javax.swing.JProgressBar();
        jProgressBarV1 = new javax.swing.JProgressBar();
        jPanelDeviceInfo = new javax.swing.JPanel();
        jButtonGetDeviceInfo = new javax.swing.JButton();
        jLabelCarnet = new javax.swing.JLabel();
        jTextFieldCarnet = new javax.swing.JTextField();
        jLabelNombreTrabajador = new javax.swing.JLabel();
        jScrollPaneAsistencia = new javax.swing.JScrollPane();
        jTableAsistencia = new javax.swing.JTable();
        jComboBoxDeviceName = new javax.swing.JComboBox();
        jLabelDeviceName = new javax.swing.JLabel();
        jLabelSpacer1 = new javax.swing.JLabel();
        jLabelSpacer2 = new javax.swing.JLabel();

        setTitle("AllNovu Huella");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStatus.setText("Click Initialize Button ...");
        jLabelStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(jLabelStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 490, 30));

        jPanelImage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonInit.setText("Inicializar");
        jButtonInit.setMaximumSize(new java.awt.Dimension(100, 30));
        jButtonInit.setMinimumSize(new java.awt.Dimension(100, 30));
        jButtonInit.setName("jButtonInit"); // NOI18N
        jButtonInit.setPreferredSize(new java.awt.Dimension(100, 30));
        jButtonInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInitActionPerformed(evt);
            }
        });
        jPanelImage.add(jButtonInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 125, 30));

        jLabelImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelImage.setMinimumSize(new java.awt.Dimension(260, 300));
        jLabelImage.setPreferredSize(new java.awt.Dimension(260, 300));
        jPanelImage.add(jLabelImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabelRegistro.setText("Registro");
        jPanelImage.add(jLabelRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, -1, -1));

        jComboBoxRegistro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entrada", "Salida" }));
        jComboBoxRegistro.setMaximumSize(new java.awt.Dimension(170, 27));
        jComboBoxRegistro.setMinimumSize(new java.awt.Dimension(170, 27));
        jComboBoxRegistro.setPreferredSize(new java.awt.Dimension(170, 27));
        jPanelImage.add(jComboBoxRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 170, 27));

        jButtonToggleLED.setText("LED");
        jButtonToggleLED.setMaximumSize(new java.awt.Dimension(100, 30));
        jButtonToggleLED.setMinimumSize(new java.awt.Dimension(100, 30));
        jButtonToggleLED.setPreferredSize(new java.awt.Dimension(100, 30));
        jButtonToggleLED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToggleLEDActionPerformed(evt);
            }
        });
        jPanelImage.add(jButtonToggleLED, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 10, 125, 30));

        jButtonCapture.setText("Capturar");
        jButtonCapture.setMaximumSize(new java.awt.Dimension(100, 30));
        jButtonCapture.setMinimumSize(new java.awt.Dimension(100, 30));
        jButtonCapture.setPreferredSize(new java.awt.Dimension(100, 30));
        jButtonCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureActionPerformed(evt);
            }
        });
        jPanelImage.add(jButtonCapture, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 125, 30));


        jSliderQuality.setMajorTickSpacing(10);
        jSliderQuality.setMinorTickSpacing(5);
        jSliderQuality.setPaintLabels(true);
        jSliderQuality.setPaintTicks(true);
        jSliderQuality.setName(""); // NOI18N
        jSliderQuality.setOpaque(false);
        jPanelImage.add(jSliderQuality, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 170, 220, -1));

        jLabel2.setText("Calidad de Imagen");
        jPanelImage.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, -1));

        jLabel3.setText("Tiempo de espera (segundos)");
        jPanelImage.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 230, -1, -1));

        jSliderSeconds.setMajorTickSpacing(1);
        jSliderSeconds.setMaximum(10);
        jSliderSeconds.setMinimum(1);
        jSliderSeconds.setPaintLabels(true);
        jSliderSeconds.setPaintTicks(true);
        jSliderSeconds.setValue(5);
        jPanelImage.add(jSliderSeconds, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, 220, -1));

        jButtonClose.setText("Cerrar");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanelImage.add(jButtonClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 10, 105, 30));
        jButtonClose.getAccessibleContext().setAccessibleName("jButtonClose");

        jTabbedPane1.addTab("Inicio", jPanelImage);

        jPanelRegisterVerify.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelSecurityLevel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Nivel de Seguridad  "));
        jPanelRegisterVerify.add(jLabelSecurityLevel,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 460, 60));

        jLabelRegistration.setText("Registro:");
        jPanelRegisterVerify.add(jLabelRegistration, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 34, -1, -1));

        jLabelVerification.setText("Verificación:");
        jPanelRegisterVerify.add(jLabelVerification,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 34, -1, -1));

        jComboBoxRegisterSecurityLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWEST", "LOWER",
                "LOW", "BELOW_NORMAL", "NORMAL", "ABOVE_NORMAL", "HIGH", "HIGHER", "HIGHEST" }));
        jPanelRegisterVerify.add(jComboBoxRegisterSecurityLevel,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 130, -1));

        jComboBoxVerifySecurityLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LOWEST", "LOWER",
                "LOW", "BELOW_NORMAL", "NORMAL", "ABOVE_NORMAL", "HIGH", "HIGHER", "HIGHEST" }));
        jPanelRegisterVerify.add(jComboBoxVerifySecurityLevel,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 30, 130, -1));

        jLabelRegistrationBox.setBorder(javax.swing.BorderFactory.createTitledBorder("  Registro  "));
        jPanelRegisterVerify.add(jLabelRegistrationBox,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 290, 240));

        jLabelRegisterImage1
                .setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelRegisterImage1.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelRegisterImage1.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelRegisterImage1,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabelRegisterImage2
                .setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelRegisterImage2.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelRegisterImage2.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelRegisterImage2,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, -1, -1));

        jLabelVerificationBox.setBorder(javax.swing.BorderFactory.createTitledBorder("  Verificación  "));
        jPanelRegisterVerify.add(jLabelVerificationBox,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 150, 240));

        jLabelVerifyImage
                .setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabelVerifyImage.setMinimumSize(new java.awt.Dimension(130, 150));
        jLabelVerifyImage.setPreferredSize(new java.awt.Dimension(130, 150));
        jPanelRegisterVerify.add(jLabelVerifyImage,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, -1, -1));

        jButtonCaptureR1.setText("Capturar R1");
        jButtonCaptureR1.setActionCommand("jButton1");
        jButtonCaptureR1.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureR1ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 130, 30));

        jButtonCaptureV1.setText("Capturar V1");
        jButtonCaptureV1.setActionCommand("jButton1");
        jButtonCaptureV1.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureV1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureV1ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureV1,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 130, 30));

        jButtonRegister.setText("Registrar");
        jButtonRegister.setActionCommand("jButton1");
        jButtonRegister.setMaximumSize(new java.awt.Dimension(270, 30));
        jButtonRegister.setMinimumSize(new java.awt.Dimension(270, 30));
        jButtonRegister.setPreferredSize(new java.awt.Dimension(270, 30));
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 270, 30));

        jButtonVerify.setText("Verificar");
        jButtonVerify.setActionCommand("jButton1");
        jButtonVerify.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonVerify.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonVerify.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerifyActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonVerify, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 130, 30));

        jButtonCaptureR2.setText("Capturar R2");
        jButtonCaptureR2.setActionCommand("jButton1");
        jButtonCaptureR2.setMaximumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.setMinimumSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.setPreferredSize(new java.awt.Dimension(130, 30));
        jButtonCaptureR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaptureR2ActionPerformed(evt);
            }
        });
        jPanelRegisterVerify.add(jButtonCaptureR2,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 130, 30));

        jProgressBarR1.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 130, -1));

        jProgressBarR2.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, 130, -1));

        jProgressBarV1.setForeground(new java.awt.Color(0, 51, 153));
        jPanelRegisterVerify.add(jProgressBarV1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 250, 130, -1));

        jTabbedPane1.addTab("Registrar/Verifcar", jPanelRegisterVerify);

        jPanelDeviceInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelCarnet.setText("Carnet de Identidad:");
        jPanelDeviceInfo.add(jLabelCarnet, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));
        jPanelDeviceInfo.add(jTextFieldCarnet, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 160, -1));

        jButtonGetDeviceInfo.setText("Obtener Información");
        jButtonGetDeviceInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetDeviceInfoActionPerformed(evt);
            }
        });
        jPanelDeviceInfo.add(jButtonGetDeviceInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 150, 30));

        jLabelNombreTrabajador.setText("Nombre del Trabajador:");
        jPanelDeviceInfo.add(jLabelNombreTrabajador,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 450, -1));

        jTableAsistencia.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Fecha", "Hora Entrada", "Hora Salida"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPaneAsistencia.setViewportView(jTableAsistencia);

        jPanelDeviceInfo.add(jScrollPaneAsistencia,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 450, 250));

        jTabbedPane1.addTab("Información del Trabajador", jPanelDeviceInfo);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, 530, 420));

        jComboBoxDeviceName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AUTO", "HU20-AP", "HU20-A",
                "HU10-AP", "HU10", "HUPX", "HU20", "HSDU04P", "HSDU03P", "HFDU02" }));
        jComboBoxDeviceName.setMinimumSize(new java.awt.Dimension(350, 10));
        jComboBoxDeviceName.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(jComboBoxDeviceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 350, -1));

        jLabelDeviceName.setText("Nombre del Dispositivo");
        getContentPane().add(jLabelDeviceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 110, -1));

        jLabelSpacer1.setText(" ");
        getContentPane().add(jLabelSpacer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 490, 10, -1));

        jLabelSpacer2.setText(" ");
        getContentPane().add(jLabelSpacer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 10, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCloseActionPerformed
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;
        if (fplib != null) {
            iError = fplib.CloseDevice();
            fplib.Close();
            fplib = null;
        }
        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE)
            this.jLabelStatus.setText("CloseDevice() Success [" + iError + "]");
        else
            this.jLabelStatus.setText("CloseDevice() Error : " + iError);
        disableControls();

    }// GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonGetDeviceInfoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonGetDeviceInfoActionPerformed
        String carnetIdentidad = jTextFieldCarnet.getText();
        if (carnetIdentidad.trim().isEmpty()) {
            jLabelStatus.setText("Por favor, introduzca el carnet de identidad.");
            return;
        }

        // Limpiar datos anteriores
        jLabelNombreTrabajador.setText("Nombre del Trabajador:");
        DefaultTableModel model = (DefaultTableModel) jTableAsistencia.getModel();
        model.setRowCount(0);

        try {
            // Obtener nombre del trabajador
            String sqlNombre = "SELECT nombre, apellidos FROM trabajadores WHERE carnet_identidad = ?";
            PreparedStatement pstmtNombre = dbConnection.prepareStatement(sqlNombre);
            pstmtNombre.setString(1, carnetIdentidad);
            ResultSet rsNombre = pstmtNombre.executeQuery();

            if (rsNombre.next()) {
                String nombre = rsNombre.getString("nombre") + " " + rsNombre.getString("apellidos");
                jLabelNombreTrabajador.setText("Nombre del Trabajador: " + nombre);

                // Obtener registro de asistencia del último mes
                String sqlAsistencia = "SELECT fecha, hora_entrada, hora_salida FROM registro_asistencia ra " +
                        "JOIN trabajadores t ON ra.trabajador_id = t.id " +
                        "WHERE t.carnet_identidad = ? AND ra.fecha >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) " +
                        "ORDER BY ra.fecha DESC";
                PreparedStatement pstmtAsistencia = dbConnection.prepareStatement(sqlAsistencia);
                pstmtAsistencia.setString(1, carnetIdentidad);
                ResultSet rsAsistencia = pstmtAsistencia.executeQuery();

                while (rsAsistencia.next()) {
                    Vector<Object> row = new Vector<>();
                    row.add(rsAsistencia.getDate("fecha"));
                    row.add(rsAsistencia.getTime("hora_entrada"));
                    row.add(rsAsistencia.getTime("hora_salida"));
                    model.addRow(row);
                }
                jLabelStatus.setText("Información de asistencia cargada.");

            } else {
                jLabelStatus.setText("No se encontró ningún trabajador con el carnet de identidad proporcionado.");
            }

        } catch (SQLException e) {
            jLabelStatus.setText("Error al consultar la base de datos: " + e.getMessage());
        }
    }// GEN-LAST:event_jButtonGetDeviceInfoActionPerformed

    private void jButtonVerifyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonVerifyActionPerformed
        long secuLevel = (long) (this.jComboBoxVerifySecurityLevel.getSelectedIndex() + 1);
        boolean[] matched = new boolean[1];

        String sql = "SELECT id, nombre, apellidos, carnet_identidad, huella_dactilar FROM trabajadores WHERE huella_dactilar IS NOT NULL";
        try (PreparedStatement pstmt = dbConnection.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery()) {

            boolean fingerMatched = false;
            while (rs.next()) {
                String encodedTemplate = rs.getString("huella_dactilar");
                if (encodedTemplate != null && !encodedTemplate.isEmpty()) {
                    byte[] dbTemplate = Base64.getDecoder().decode(encodedTemplate);

                    long iError = fplib.MatchTemplate(dbTemplate, vrfMin, secuLevel, matched);

                    if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE && matched[0]) {
                        String nombre = rs.getString("nombre");
                        String apellidos = rs.getString("apellidos");
                        String carnet = rs.getString("carnet_identidad");
                        this.jLabelStatus.setText("Verificación Exitosa para: " + nombre + " " + apellidos + " (CI: " + carnet + ")");
                        fingerMatched = true;
                        break;
                    }
                }
            }

            if (!fingerMatched) {
                this.jLabelStatus.setText("Fallo de Verificación. Huella no encontrada.");
            }
        } catch (SQLException e) {
            this.jLabelStatus.setText("Error al verificar la huella dactilar: " + e.getMessage());
        }
    }// GEN-LAST:event_jButtonVerifyActionPerformed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonRegisterActionPerformed
        int[] matchScore = new int[1];
        boolean[] matched = new boolean[1];
        long iError;
        long secuLevel = (long) (this.jComboBoxRegisterSecurityLevel.getSelectedIndex() + 1);
        matched[0] = false;

        iError = fplib.MatchTemplate(regMin1, regMin2, secuLevel, matched);
        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            matchScore[0] = 0;
            iError = fplib.GetMatchingScore(regMin1, regMin2, matchScore);

            if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                if (matched[0]) {
                    String carnetIdentidad = JOptionPane.showInputDialog(this,
                            "Registro exitoso. Ingrese el carnet de identidad del trabajador:");
                    if (carnetIdentidad != null && !carnetIdentidad.trim().isEmpty()) {
                        saveFingerprint(carnetIdentidad, regMin1);
                    }
                } else
                    this.jLabelStatus.setText("Registro Fallado, Matching Score: " + matchScore[0]);

            } else
                this.jLabelStatus.setText("Registro Fallado, GetMatchingScore() Error : " + iError);
        } else
            this.jLabelStatus.setText("Registro Fallado, MatchTemplate() Error : " + iError);
    }// GEN-LAST:event_jButtonRegisterActionPerformed

    private void jButtonCaptureV1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCaptureV1ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgVerification.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarV1.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelVerifyImage
                    .setIcon(new ImageIcon(imgVerification.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));
            if (quality[0] < MINIMUM_QUALITY)
                this.jLabelStatus.setText("GetImageEx() Exitoso [" + ret + "] pero calidad de imagen [" + quality[0]
                        + "]. Por Favor intentelo nuevamente");
            else {
                this.jLabelStatus.setText("GetImageEx() Exitoso [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, vrfMin);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1,
                            quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, vrfMin, numOfMinutiae);

                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ)
                            && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        this.jLabelStatus.setText("Verificación Capture PASS QC. Calidad[" + quality[0] + "] NFIQ["
                                + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        v1Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Verificación Capture FAIL QC. Quality[" + quality[0] + "] NFIQ["
                                + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                    }
                } else
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
            }
        } else
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);

    }// GEN-LAST:event_jButtonCaptureV1ActionPerformed

    private void jButtonCaptureR2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCaptureR2ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgRegistration2.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarR2.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelRegisterImage2
                    .setIcon(new ImageIcon(imgRegistration2.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));
            if (quality[0] < MINIMUM_QUALITY)
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "] but image quality is [" + quality[0]
                        + "]. Please try again");
            else {
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, regMin2);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {

                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1,
                            quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, regMin2, numOfMinutiae);
                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ)
                            && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        this.jLabelStatus.setText("Reg. Capture 2 PASS QC. Qual[" + quality[0] + "] NFIQ[" + nfiqvalue
                                + "] Minutiae[" + numOfMinutiae[0] + "]");
                        r2Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Reg. Capture 2 FAIL QC. Quality[" + quality[0] + "] NFIQ["
                                + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                        this.jButtonRegister.setEnabled(false);
                    }

                } else
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
            }
        } else
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);

    }// GEN-LAST:event_jButtonCaptureR2ActionPerformed

    private void jButtonCaptureR1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonCaptureR1ActionPerformed
        int[] quality = new int[1];
        int[] numOfMinutiae = new int[1];
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) imgRegistration1.getRaster().getDataBuffer()).getData();
        long iError = SGFDxErrorCode.SGFDX_ERROR_NONE;

        iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());
        fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1, quality);
        this.jProgressBarR1.setValue(quality[0]);
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImageQuality = quality[0];
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jButtonVerify.setEnabled(false);
            this.jButtonRegister.setEnabled(false);
            this.jLabelRegisterImage1
                    .setIcon(new ImageIcon(imgRegistration1.getScaledInstance(130, 150, Image.SCALE_DEFAULT)));
            if (quality[0] < MINIMUM_QUALITY)
                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "] but image quality is [" + quality[0]
                        + "]. Please try again");
            else {

                this.jLabelStatus.setText("GetImageEx() Success [" + ret + "]");

                iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, regMin1);
                if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    long nfiqvalue;
                    long ret2 = fplib.GetImageQuality(deviceInfo.imageWidth, deviceInfo.imageHeight, imageBuffer1,
                            quality);
                    nfiqvalue = fplib.ComputeNFIQ(imageBuffer1, deviceInfo.imageWidth, deviceInfo.imageHeight);
                    ret2 = fplib.GetNumOfMinutiae(SGFDxTemplateFormat.TEMPLATE_FORMAT_SG400, regMin1, numOfMinutiae);

                    if ((quality[0] >= MINIMUM_QUALITY) && (nfiqvalue <= MAXIMUM_NFIQ)
                            && (numOfMinutiae[0] >= MINIMUM_NUM_MINUTIAE)) {
                        this.jLabelStatus.setText("Reg. Capture 1 PASS QC. Qual[" + quality[0] + "] NFIQ[" + nfiqvalue
                                + "] Minutiae[" + numOfMinutiae[0] + "]");
                        r1Captured = true;
                        this.enableRegisterAndVerifyControls();
                    } else {
                        this.jLabelStatus.setText("Reg. Capture 1 FAIL QC. Quality[" + quality[0] + "] NFIQ["
                                + nfiqvalue + "] Minutiae[" + numOfMinutiae[0] + "]");
                        this.jButtonVerify.setEnabled(false);
                        this.jButtonRegister.setEnabled(false);
                    }
                } else
                    this.jLabelStatus.setText("CreateTemplate() Error : " + iError);
            }
        } else
            this.jLabelStatus.setText("GetImageEx() Error : " + iError);

    }// GEN-LAST:event_jButtonCaptureR1ActionPerformed

    private void jButtonCaptureActionPerformed(java.awt.event.ActionEvent evt) {
        if (fplib == null) {
            this.jLabelStatus.setText("JSGFPLib no está inicializado");
            return;
        }

        // 1. Capturar la imagen de la huella
        BufferedImage img1gray = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight,
                BufferedImage.TYPE_BYTE_GRAY);
        byte[] imageBuffer1 = ((java.awt.image.DataBufferByte) img1gray.getRaster().getDataBuffer()).getData();
        long iError = fplib.GetImageEx(imageBuffer1, jSliderSeconds.getValue() * 1000, 0, jSliderQuality.getValue());

        if (iError != SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelStatus.setText("Error al capturar la imagen: " + iError);
            return;
        }
        this.jLabelImage.setIcon(new ImageIcon(img1gray));

        // 2. Crear la plantilla de la huella capturada
        byte[] capturedTemplate = new byte[400];
        SGFingerInfo fingerInfo = new SGFingerInfo();
        fingerInfo.FingerNumber = SGFingerPosition.SG_FINGPOS_LI;
        fingerInfo.ImpressionType = SGImpressionType.SG_IMPTYPE_LP;
        fingerInfo.ViewNumber = 1;

        iError = fplib.CreateTemplate(fingerInfo, imageBuffer1, capturedTemplate);
        if (iError != SGFDxErrorCode.SGFDX_ERROR_NONE) {
            this.jLabelStatus.setText("Error al crear la plantilla: " + iError);
            return;
        }

        // 3. Verificar la huella en la base de datos
        boolean[] matched = new boolean[1];
        long secuLevel = (long) (this.jComboBoxVerifySecurityLevel.getSelectedIndex() + 1);
        String sql = "SELECT id, nombre, apellidos, carnet_identidad, huella_dactilar, foto, NOW() as fecha_hora_servidor FROM trabajadores WHERE huella_dactilar IS NOT NULL";

        try (PreparedStatement pstmt = dbConnection.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {
            boolean fingerMatched = false;
            while (rs.next()) {
                String encodedTemplate = rs.getString("huella_dactilar");
                if (encodedTemplate != null && !encodedTemplate.isEmpty()) {
                    byte[] dbTemplate = Base64.getDecoder().decode(encodedTemplate);
                    iError = fplib.MatchTemplate(dbTemplate, capturedTemplate, secuLevel, matched);

                    if (iError == SGFDxErrorCode.SGFDX_ERROR_NONE && matched[0]) {
                        int trabajadorId = rs.getInt("id");
                        String nombre = rs.getString("nombre");
                        String apellidos = rs.getString("apellidos");
                        String carnet = rs.getString("carnet_identidad");
                        String fechaHora = rs.getString("fecha_hora_servidor");
                        String fotoPath = rs.getString("foto");
                        String tipoRegistro = (String) jComboBoxRegistro.getSelectedItem();
                        String etiquetaFecha = "Fecha/Hora " + tipoRegistro;
                        String mensajeAsistencia = registrarAsistencia(trabajadorId, tipoRegistro);

                        // Panel para mostrar la información y la foto
                        JPanel panel = new JPanel(new BorderLayout(15, 15));
                        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

                        // Etiqueta para la foto
                        JLabel fotoLabel = new JLabel();
                        if (fotoPath != null && !fotoPath.trim().isEmpty()) {
                            try {
                                URL imageUrl = new URL("http://192.168.8.7/" + fotoPath);
                                BufferedImage img = ImageIO.read(imageUrl);
                                if (img != null) {
                                    Image scaledImg = img.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                                    fotoLabel.setIcon(new ImageIcon(scaledImg));
                                } else {
                                    fotoLabel.setText("No se pudo cargar la foto");
                                }
                            } catch (IOException e) {
                                fotoLabel.setText("Error de red o URL");
                            }
                        } else {
                            fotoLabel.setText("No hay foto");
                        }

                        // Configuración común para la etiqueta de la foto si no hay imagen
                        if (fotoLabel.getIcon() == null) {
                            fotoLabel.setPreferredSize(new Dimension(100, 100));
                            fotoLabel.setHorizontalAlignment(JLabel.CENTER);
                            fotoLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                        }
                        panel.add(fotoLabel, BorderLayout.WEST);

                        // Etiqueta para la información del trabajador
                        String mensajeCompleto = "<html><b>Trabajador:</b> " + nombre + " " + apellidos + "<br>" +
                                "<b>Carnet de Identidad:</b> " + carnet + "<br>" +
                                "<b>" + etiquetaFecha + ":</b> " + fechaHora + "<br>" +
                                "<b>Registro:</b> " + mensajeAsistencia + "</html>";
                        JLabel infoLabel = new JLabel(mensajeCompleto);
                        panel.add(infoLabel, BorderLayout.CENTER);

                        JOptionPane.showMessageDialog(this, panel, "Confirmación de Registro",
                                JOptionPane.INFORMATION_MESSAGE);
                        this.jLabelStatus
                                .setText("Verificación correcta. " + mensajeAsistencia);
                        fingerMatched = true;
                        break;
                    }
                }
            }

            if (!fingerMatched) {
                this.jLabelStatus.setText("Huella no encontrada en la base de datos.");
            }

        } catch (SQLException e) {
            this.jLabelStatus.setText("Error al verificar en la base de datos: " + e.getMessage());
        }
    }

    private void jButtonToggleLEDActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonToggleLEDActionPerformed
        if (fplib != null) {
            bLEDOn = !bLEDOn;
            ret = fplib.SetLedOn(bLEDOn);
            if (ret == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                this.jLabelStatus.setText("SetLedOn(" + bLEDOn + ") Success [" + ret + "]");
            } else {
                this.jLabelStatus.setText("SetLedOn(" + bLEDOn + ") Error [" + ret + "]");
            }
        } else {
            this.jLabelStatus.setText("JSGFPLib no esta inicializado");
        }
    }// GEN-LAST:event_jButtonToggleLEDActionPerformed

    private String registrarAsistencia(int trabajadorId, String tipoRegistro) {
        String checkSql = "SELECT id, hora_entrada, hora_salida FROM registro_asistencia WHERE trabajador_id = ? AND fecha = CURDATE()";
        try (PreparedStatement checkPstmt = dbConnection.prepareStatement(checkSql)) {
            checkPstmt.setInt(1, trabajadorId);
            ResultSet rs = checkPstmt.executeQuery();

            if (rs.next()) { // Record for today exists
                Time horaEntrada = rs.getTime("hora_entrada");
                Time horaSalida = rs.getTime("hora_salida");
                int registroId = rs.getInt("id");

                if (tipoRegistro.equals("Entrada")) {
                    if (horaEntrada == null) {
                        String updateSql = "UPDATE registro_asistencia SET hora_entrada = CURTIME() WHERE id = ?";
                        try (PreparedStatement updatePstmt = dbConnection.prepareStatement(updateSql)) {
                            updatePstmt.setInt(1, registroId);
                            updatePstmt.executeUpdate();
                            return "Entrada registrada exitosamente.";
                        }
                    } else {
                        return "La entrada ya fue registrada hoy.";
                    }
                } else { // Salida
                    if (horaSalida == null) {
                        String updateSql = "UPDATE registro_asistencia SET hora_salida = CURTIME() WHERE id = ?";
                        try (PreparedStatement updatePstmt = dbConnection.prepareStatement(updateSql)) {
                            updatePstmt.setInt(1, registroId);
                            updatePstmt.executeUpdate();
                            return "Salida registrada exitosamente.";
                        }
                    } else {
                        return "La salida ya fue registrada hoy.";
                    }
                }
            } else { // No record for today, insert new
                String insertSql = "INSERT INTO registro_asistencia (trabajador_id, fecha, hora_entrada, hora_salida) VALUES (?, CURDATE(), ?, ?)";
                try (PreparedStatement insertPstmt = dbConnection.prepareStatement(insertSql)) {
                    insertPstmt.setInt(1, trabajadorId);
                    if (tipoRegistro.equals("Entrada")) {
                        insertPstmt.setTime(2, new java.sql.Time(System.currentTimeMillis()));
                        insertPstmt.setNull(3, java.sql.Types.TIME);
                    } else { // Salida
                        insertPstmt.setNull(2, java.sql.Types.TIME);
                        insertPstmt.setTime(3, new java.sql.Time(System.currentTimeMillis()));
                    }
                    insertPstmt.executeUpdate();
                    return tipoRegistro + " registrada exitosamente.";
                }
            }
        } catch (SQLException e) {
            this.jLabelStatus.setText("Error al registrar asistencia: " + e.getMessage());
            return "Error al registrar asistencia.";
        }
    }

    private void jButtonInitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonInitActionPerformed
        int selectedDevice = jComboBoxDeviceName.getSelectedIndex();
        // AUTO
        // FDU08 Hamster Pro 20A
        // FDU07A Hamster Pro 10AP
        // FDU07 Hamster Pro 10
        // FDU06 Hamster Pro
        // FDU05 Hamster Pro 20
        // FDU04 Hamster IV
        // FDU03 Hamster Plus
        // FDU02 Hamster III
        switch (selectedDevice) {
            case 0: // USB
            default:
                this.deviceName = SGFDxDeviceName.SG_DEV_AUTO;
                break;
            case 1: // HU20-AP
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU08;
                break;
            case 2: // HU20-A
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU08;
                break;
            case 3: // HU10-AP
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU07A;
                break;
            case 4: // HU10
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU07;
                break;
            case 5: // HUPX
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU06;
                break;
            case 6: // HU20
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU05;
                break;
            case 7: // HSDU04P
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU04;
                break;
            case 8: // HSDU03P
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU03;
                break;
            case 9: // HFDU02
                this.deviceName = SGFDxDeviceName.SG_DEV_FDU02;
                break;
        }
        if (fplib != null) {
            fplib.CloseDevice();
            fplib.Close();
            fplib = null;
        }
        fplib = new JSGFPLib();
        ret = fplib.Init(this.deviceName);
        if ((fplib != null) && (ret == SGFDxErrorCode.SGFDX_ERROR_NONE)) {
            this.jLabelStatus.setText("JSGFPLib Inicializado Exitosamente");
            this.devicePort = SGPPPortAddr.AUTO_DETECT;
            ret = fplib.OpenDevice(this.devicePort);
            if (ret == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                this.jLabelStatus.setText("OpenDevice() Exitoso [" + ret + "]");
                ret = fplib.GetDeviceInfo(deviceInfo);
                if (ret == SGFDxErrorCode.SGFDX_ERROR_NONE) {
                    imgRegistration1 = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight,
                            BufferedImage.TYPE_BYTE_GRAY);
                    imgRegistration2 = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight,
                            BufferedImage.TYPE_BYTE_GRAY);
                    imgVerification = new BufferedImage(deviceInfo.imageWidth, deviceInfo.imageHeight,
                            BufferedImage.TYPE_BYTE_GRAY);
                    this.enableControls();
                } else
                    this.jLabelStatus.setText("GetDeviceInfo() Error [" + ret + "]");
            } else
                this.jLabelStatus.setText("OpenDevice() Error [" + ret + "]");
        } else
            this.jLabelStatus.setText("JSGFPLib Initialización Fallada");

    }// GEN-LAST:event_jButtonInitActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
        disconnectFromDatabase();
        System.exit(0);
    }// GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new JSGD().setVisible(true);
    }

    private void saveFingerprint(String carnetIdentidad, byte[] fingerprintTemplate) {
        if (dbConnection == null) {
            jLabelStatus.setText("Error: No hay conexión con la base de datos.");
            return;
        }
        String encodedTemplate = Base64.getEncoder().encodeToString(fingerprintTemplate);
        String sql = "UPDATE trabajadores SET huella_dactilar = ? WHERE carnet_identidad = ?";

        try (PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            pstmt.setString(1, encodedTemplate);
            pstmt.setString(2, carnetIdentidad);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                jLabelStatus.setText("Huella dactilar guardada exitosamente.");
            } else {
                jLabelStatus.setText("No se encontró ningún trabajador con el carnet de identidad proporcionado.");
            }
        } catch (SQLException e) {
            jLabelStatus.setText("Error al guardar la huella dactilar: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCapture;
    private javax.swing.JButton jButtonCaptureR1;
    private javax.swing.JButton jButtonCaptureR2;
    private javax.swing.JButton jButtonCaptureV1;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonGetDeviceInfo;
    private javax.swing.JButton jButtonInit;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JButton jButtonToggleLED;
    private javax.swing.JButton jButtonVerify;
    private javax.swing.JComboBox jComboBoxDeviceName;
    private javax.swing.JComboBox jComboBoxRegisterSecurityLevel;
    private javax.swing.JComboBox jComboBoxVerifySecurityLevel;
    private javax.swing.JComboBox jComboBoxRegistro;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelCarnet;
    private javax.swing.JLabel jLabelDeviceName;
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JLabel jLabelNombreTrabajador;
    private javax.swing.JLabel jLabelRegisterImage1;
    private javax.swing.JLabel jLabelRegisterImage2;
    private javax.swing.JLabel jLabelRegistration;
    private javax.swing.JLabel jLabelRegistrationBox;
    private javax.swing.JLabel jLabelRegistro;
    private javax.swing.JLabel jLabelSecurityLevel;
    private javax.swing.JLabel jLabelSpacer1;
    private javax.swing.JLabel jLabelSpacer2;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelVerification;
    private javax.swing.JLabel jLabelVerificationBox;
    private javax.swing.JLabel jLabelVerifyImage;
    private javax.swing.JPanel jPanelDeviceInfo;
    private javax.swing.JPanel jPanelImage;
    private javax.swing.JPanel jPanelRegisterVerify;
    private javax.swing.JProgressBar jProgressBarR1;
    private javax.swing.JProgressBar jProgressBarR2;
    private javax.swing.JProgressBar jProgressBarV1;
    private javax.swing.JScrollPane jScrollPaneAsistencia;
    private javax.swing.JSlider jSliderQuality;
    private javax.swing.JSlider jSliderSeconds;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableAsistencia;
    private javax.swing.JTextField jTextFieldCarnet;
    // End of variables declaration//GEN-END:variables

}
